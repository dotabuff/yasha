// Code generated by protoc-gen-go.
// source: steamdatagram_messages.proto
// DO NOT EDIT!

package dota

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ESteamDatagramMsgID int32

const (
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingRequest            ESteamDatagramMsgID = 1
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingReply              ESteamDatagramMsgID = 2
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingRequest        ESteamDatagramMsgID = 3
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingReply          ESteamDatagramMsgID = 4
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionRequest     ESteamDatagramMsgID = 5
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionEstablished ESteamDatagramMsgID = 6
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoSession                    ESteamDatagramMsgID = 7
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Diagnostic                   ESteamDatagramMsgID = 8
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataClientToRouter           ESteamDatagramMsgID = 9
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToServer           ESteamDatagramMsgID = 10
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataServerToRouter           ESteamDatagramMsgID = 11
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToClient           ESteamDatagramMsgID = 12
)

var ESteamDatagramMsgID_name = map[int32]string{
	1:  "k_ESteamDatagramMsg_RouterPingRequest",
	2:  "k_ESteamDatagramMsg_RouterPingReply",
	3:  "k_ESteamDatagramMsg_GameserverPingRequest",
	4:  "k_ESteamDatagramMsg_GameserverPingReply",
	5:  "k_ESteamDatagramMsg_GameserverSessionRequest",
	6:  "k_ESteamDatagramMsg_GameserverSessionEstablished",
	7:  "k_ESteamDatagramMsg_NoSession",
	8:  "k_ESteamDatagramMsg_Diagnostic",
	9:  "k_ESteamDatagramMsg_DataClientToRouter",
	10: "k_ESteamDatagramMsg_DataRouterToServer",
	11: "k_ESteamDatagramMsg_DataServerToRouter",
	12: "k_ESteamDatagramMsg_DataRouterToClient",
}
var ESteamDatagramMsgID_value = map[string]int32{
	"k_ESteamDatagramMsg_RouterPingRequest":            1,
	"k_ESteamDatagramMsg_RouterPingReply":              2,
	"k_ESteamDatagramMsg_GameserverPingRequest":        3,
	"k_ESteamDatagramMsg_GameserverPingReply":          4,
	"k_ESteamDatagramMsg_GameserverSessionRequest":     5,
	"k_ESteamDatagramMsg_GameserverSessionEstablished": 6,
	"k_ESteamDatagramMsg_NoSession":                    7,
	"k_ESteamDatagramMsg_Diagnostic":                   8,
	"k_ESteamDatagramMsg_DataClientToRouter":           9,
	"k_ESteamDatagramMsg_DataRouterToServer":           10,
	"k_ESteamDatagramMsg_DataServerToRouter":           11,
	"k_ESteamDatagramMsg_DataRouterToClient":           12,
}

func (x ESteamDatagramMsgID) Enum() *ESteamDatagramMsgID {
	p := new(ESteamDatagramMsgID)
	*p = x
	return p
}
func (x ESteamDatagramMsgID) String() string {
	return proto.EnumName(ESteamDatagramMsgID_name, int32(x))
}
func (x *ESteamDatagramMsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ESteamDatagramMsgID_value, data, "ESteamDatagramMsgID")
	if err != nil {
		return err
	}
	*x = ESteamDatagramMsgID(value)
	return nil
}

type CMsgSteamDatagramRouterPingRequest struct {
	ClientTimestamp          *uint32  `protobuf:"fixed32,1,opt,name=client_timestamp" json:"client_timestamp,omitempty"`
	RequestLatencyServiceIds []uint32 `protobuf:"varint,2,rep,packed,name=request_latency_service_ids" json:"request_latency_service_ids,omitempty"`
	XXX_unrecognized         []byte   `json:"-"`
}

func (m *CMsgSteamDatagramRouterPingRequest) Reset()         { *m = CMsgSteamDatagramRouterPingRequest{} }
func (m *CMsgSteamDatagramRouterPingRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramRouterPingRequest) ProtoMessage()    {}

func (m *CMsgSteamDatagramRouterPingRequest) GetClientTimestamp() uint32 {
	if m != nil && m.ClientTimestamp != nil {
		return *m.ClientTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingRequest) GetRequestLatencyServiceIds() []uint32 {
	if m != nil {
		return m.RequestLatencyServiceIds
	}
	return nil
}

type CMsgSteamDatagramRouterPingReply struct {
	ClientTimestamp   *uint32  `protobuf:"fixed32,1,opt,name=client_timestamp" json:"client_timestamp,omitempty"`
	LatencyServiceIds []uint32 `protobuf:"varint,2,rep,packed,name=latency_service_ids" json:"latency_service_ids,omitempty"`
	LatencyPingMs     []uint32 `protobuf:"varint,3,rep,packed,name=latency_ping_ms" json:"latency_ping_ms,omitempty"`
	YourPublicIp      *uint32  `protobuf:"fixed32,4,opt,name=your_public_ip" json:"your_public_ip,omitempty"`
	ServerTime        *uint32  `protobuf:"fixed32,5,opt,name=server_time" json:"server_time,omitempty"`
	Challenge         *uint64  `protobuf:"fixed64,6,opt,name=challenge" json:"challenge,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *CMsgSteamDatagramRouterPingReply) Reset()         { *m = CMsgSteamDatagramRouterPingReply{} }
func (m *CMsgSteamDatagramRouterPingReply) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramRouterPingReply) ProtoMessage()    {}

func (m *CMsgSteamDatagramRouterPingReply) GetClientTimestamp() uint32 {
	if m != nil && m.ClientTimestamp != nil {
		return *m.ClientTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetLatencyServiceIds() []uint32 {
	if m != nil {
		return m.LatencyServiceIds
	}
	return nil
}

func (m *CMsgSteamDatagramRouterPingReply) GetLatencyPingMs() []uint32 {
	if m != nil {
		return m.LatencyPingMs
	}
	return nil
}

func (m *CMsgSteamDatagramRouterPingReply) GetYourPublicIp() uint32 {
	if m != nil && m.YourPublicIp != nil {
		return *m.YourPublicIp
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetServerTime() uint32 {
	if m != nil && m.ServerTime != nil {
		return *m.ServerTime
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetChallenge() uint64 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

type CMsgSteamDatagramGameserverPing struct {
	ClientSessionId         *uint32 `protobuf:"varint,1,opt,name=client_session_id" json:"client_session_id,omitempty"`
	ClientSteamId           *uint64 `protobuf:"fixed64,2,opt,name=client_steam_id" json:"client_steam_id,omitempty"`
	ClientTimestamp         *uint32 `protobuf:"fixed32,3,opt,name=client_timestamp" json:"client_timestamp,omitempty"`
	RouterTimestamp         *uint32 `protobuf:"fixed32,4,opt,name=router_timestamp" json:"router_timestamp,omitempty"`
	RouterGameserverLatency *uint32 `protobuf:"varint,5,opt,name=router_gameserver_latency" json:"router_gameserver_latency,omitempty"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *CMsgSteamDatagramGameserverPing) Reset()         { *m = CMsgSteamDatagramGameserverPing{} }
func (m *CMsgSteamDatagramGameserverPing) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramGameserverPing) ProtoMessage()    {}

func (m *CMsgSteamDatagramGameserverPing) GetClientSessionId() uint32 {
	if m != nil && m.ClientSessionId != nil {
		return *m.ClientSessionId
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverPing) GetClientSteamId() uint64 {
	if m != nil && m.ClientSteamId != nil {
		return *m.ClientSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverPing) GetClientTimestamp() uint32 {
	if m != nil && m.ClientTimestamp != nil {
		return *m.ClientTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverPing) GetRouterTimestamp() uint32 {
	if m != nil && m.RouterTimestamp != nil {
		return *m.RouterTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverPing) GetRouterGameserverLatency() uint32 {
	if m != nil && m.RouterGameserverLatency != nil {
		return *m.RouterGameserverLatency
	}
	return 0
}

type CMsgSteamDatagramGameServerAuthTicket struct {
	TimeExpiry         *uint32 `protobuf:"fixed32,1,opt,name=time_expiry" json:"time_expiry,omitempty"`
	AuthorizedSteamId  *uint64 `protobuf:"fixed64,2,opt,name=authorized_steam_id" json:"authorized_steam_id,omitempty"`
	AuthorizedPublicIp *uint32 `protobuf:"fixed32,3,opt,name=authorized_public_ip" json:"authorized_public_ip,omitempty"`
	GameserverSteamId  *uint64 `protobuf:"fixed64,4,opt,name=gameserver_steam_id" json:"gameserver_steam_id,omitempty"`
	GameserverNetId    *uint64 `protobuf:"fixed64,5,opt,name=gameserver_net_id" json:"gameserver_net_id,omitempty"`
	Signature          []byte  `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *CMsgSteamDatagramGameServerAuthTicket) Reset()         { *m = CMsgSteamDatagramGameServerAuthTicket{} }
func (m *CMsgSteamDatagramGameServerAuthTicket) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramGameServerAuthTicket) ProtoMessage()    {}

func (m *CMsgSteamDatagramGameServerAuthTicket) GetTimeExpiry() uint32 {
	if m != nil && m.TimeExpiry != nil {
		return *m.TimeExpiry
	}
	return 0
}

func (m *CMsgSteamDatagramGameServerAuthTicket) GetAuthorizedSteamId() uint64 {
	if m != nil && m.AuthorizedSteamId != nil {
		return *m.AuthorizedSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramGameServerAuthTicket) GetAuthorizedPublicIp() uint32 {
	if m != nil && m.AuthorizedPublicIp != nil {
		return *m.AuthorizedPublicIp
	}
	return 0
}

func (m *CMsgSteamDatagramGameServerAuthTicket) GetGameserverSteamId() uint64 {
	if m != nil && m.GameserverSteamId != nil {
		return *m.GameserverSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramGameServerAuthTicket) GetGameserverNetId() uint64 {
	if m != nil && m.GameserverNetId != nil {
		return *m.GameserverNetId
	}
	return 0
}

func (m *CMsgSteamDatagramGameServerAuthTicket) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type CMsgSteamDatagramGameserverSessionRequest struct {
	Ticket           *CMsgSteamDatagramGameServerAuthTicket `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	ChallengeTime    *uint32                                `protobuf:"fixed32,3,opt,name=challenge_time" json:"challenge_time,omitempty"`
	Challenge        *uint64                                `protobuf:"fixed64,4,opt,name=challenge" json:"challenge,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *CMsgSteamDatagramGameserverSessionRequest) Reset() {
	*m = CMsgSteamDatagramGameserverSessionRequest{}
}
func (m *CMsgSteamDatagramGameserverSessionRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramGameserverSessionRequest) ProtoMessage()    {}

func (m *CMsgSteamDatagramGameserverSessionRequest) GetTicket() *CMsgSteamDatagramGameServerAuthTicket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *CMsgSteamDatagramGameserverSessionRequest) GetChallengeTime() uint32 {
	if m != nil && m.ChallengeTime != nil {
		return *m.ChallengeTime
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionRequest) GetChallenge() uint64 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

type CMsgSteamDatagramGameserverSessionEstablished struct {
	SessionId         *uint32 `protobuf:"varint,1,opt,name=session_id" json:"session_id,omitempty"`
	GameserverNetId   *uint64 `protobuf:"fixed64,2,opt,name=gameserver_net_id" json:"gameserver_net_id,omitempty"`
	GameserverSteamId *uint64 `protobuf:"fixed64,3,opt,name=gameserver_steam_id" json:"gameserver_steam_id,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *CMsgSteamDatagramGameserverSessionEstablished) Reset() {
	*m = CMsgSteamDatagramGameserverSessionEstablished{}
}
func (m *CMsgSteamDatagramGameserverSessionEstablished) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramGameserverSessionEstablished) ProtoMessage() {}

func (m *CMsgSteamDatagramGameserverSessionEstablished) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionEstablished) GetGameserverNetId() uint64 {
	if m != nil && m.GameserverNetId != nil {
		return *m.GameserverNetId
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionEstablished) GetGameserverSteamId() uint64 {
	if m != nil && m.GameserverSteamId != nil {
		return *m.GameserverSteamId
	}
	return 0
}

type CMsgSteamDatagramNoSession struct {
	SessionId        *uint32 `protobuf:"varint,1,opt,name=session_id" json:"session_id,omitempty"`
	YourPublicIp     *uint32 `protobuf:"fixed32,2,opt,name=your_public_ip" json:"your_public_ip,omitempty"`
	ServerTime       *uint32 `protobuf:"fixed32,3,opt,name=server_time" json:"server_time,omitempty"`
	Challenge        *uint64 `protobuf:"fixed64,4,opt,name=challenge" json:"challenge,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramNoSession) Reset()         { *m = CMsgSteamDatagramNoSession{} }
func (m *CMsgSteamDatagramNoSession) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramNoSession) ProtoMessage()    {}

func (m *CMsgSteamDatagramNoSession) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *CMsgSteamDatagramNoSession) GetYourPublicIp() uint32 {
	if m != nil && m.YourPublicIp != nil {
		return *m.YourPublicIp
	}
	return 0
}

func (m *CMsgSteamDatagramNoSession) GetServerTime() uint32 {
	if m != nil && m.ServerTime != nil {
		return *m.ServerTime
	}
	return 0
}

func (m *CMsgSteamDatagramNoSession) GetChallenge() uint64 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

type CMsgSteamDatagramDiagnostic struct {
	Severity         *uint32 `protobuf:"varint,1,opt,name=severity" json:"severity,omitempty"`
	Text             *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramDiagnostic) Reset()         { *m = CMsgSteamDatagramDiagnostic{} }
func (m *CMsgSteamDatagramDiagnostic) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramDiagnostic) ProtoMessage()    {}

func (m *CMsgSteamDatagramDiagnostic) GetSeverity() uint32 {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return 0
}

func (m *CMsgSteamDatagramDiagnostic) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type CMsgSteamDatagramDataRouterToServer struct {
	ClientSteamId       *uint64 `protobuf:"fixed64,1,opt,name=client_steam_id" json:"client_steam_id,omitempty"`
	ClientSessionId     *uint32 `protobuf:"varint,2,opt,name=client_session_id" json:"client_session_id,omitempty"`
	Channel             *uint32 `protobuf:"varint,3,opt,name=channel" json:"channel,omitempty"`
	Payload             []byte  `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
	PingClientTimestamp *uint32 `protobuf:"fixed32,5,opt,name=ping_client_timestamp" json:"ping_client_timestamp,omitempty"`
	PingRouterTimestamp *uint32 `protobuf:"fixed32,6,opt,name=ping_router_timestamp" json:"ping_router_timestamp,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CMsgSteamDatagramDataRouterToServer) Reset()         { *m = CMsgSteamDatagramDataRouterToServer{} }
func (m *CMsgSteamDatagramDataRouterToServer) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramDataRouterToServer) ProtoMessage()    {}

func (m *CMsgSteamDatagramDataRouterToServer) GetClientSteamId() uint64 {
	if m != nil && m.ClientSteamId != nil {
		return *m.ClientSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramDataRouterToServer) GetClientSessionId() uint32 {
	if m != nil && m.ClientSessionId != nil {
		return *m.ClientSessionId
	}
	return 0
}

func (m *CMsgSteamDatagramDataRouterToServer) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CMsgSteamDatagramDataRouterToServer) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CMsgSteamDatagramDataRouterToServer) GetPingClientTimestamp() uint32 {
	if m != nil && m.PingClientTimestamp != nil {
		return *m.PingClientTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramDataRouterToServer) GetPingRouterTimestamp() uint32 {
	if m != nil && m.PingRouterTimestamp != nil {
		return *m.PingRouterTimestamp
	}
	return 0
}

type CMsgSteamDatagramDataServerToRouter struct {
	ClientSteamId    *uint64 `protobuf:"fixed64,1,opt,name=client_steam_id" json:"client_steam_id,omitempty"`
	ClientSessionId  *uint32 `protobuf:"varint,2,opt,name=client_session_id" json:"client_session_id,omitempty"`
	Channel          *uint32 `protobuf:"varint,3,opt,name=channel" json:"channel,omitempty"`
	Payload          []byte  `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramDataServerToRouter) Reset()         { *m = CMsgSteamDatagramDataServerToRouter{} }
func (m *CMsgSteamDatagramDataServerToRouter) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramDataServerToRouter) ProtoMessage()    {}

func (m *CMsgSteamDatagramDataServerToRouter) GetClientSteamId() uint64 {
	if m != nil && m.ClientSteamId != nil {
		return *m.ClientSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramDataServerToRouter) GetClientSessionId() uint32 {
	if m != nil && m.ClientSessionId != nil {
		return *m.ClientSessionId
	}
	return 0
}

func (m *CMsgSteamDatagramDataServerToRouter) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CMsgSteamDatagramDataServerToRouter) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CMsgSteamDatagramDataClientToRouter struct {
	ClientSessionId     *uint32 `protobuf:"varint,1,opt,name=client_session_id" json:"client_session_id,omitempty"`
	Channel             *uint32 `protobuf:"varint,2,opt,name=channel" json:"channel,omitempty"`
	Payload             []byte  `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	PingClientTimestamp *uint32 `protobuf:"fixed32,4,opt,name=ping_client_timestamp" json:"ping_client_timestamp,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CMsgSteamDatagramDataClientToRouter) Reset()         { *m = CMsgSteamDatagramDataClientToRouter{} }
func (m *CMsgSteamDatagramDataClientToRouter) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramDataClientToRouter) ProtoMessage()    {}

func (m *CMsgSteamDatagramDataClientToRouter) GetClientSessionId() uint32 {
	if m != nil && m.ClientSessionId != nil {
		return *m.ClientSessionId
	}
	return 0
}

func (m *CMsgSteamDatagramDataClientToRouter) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CMsgSteamDatagramDataClientToRouter) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CMsgSteamDatagramDataClientToRouter) GetPingClientTimestamp() uint32 {
	if m != nil && m.PingClientTimestamp != nil {
		return *m.PingClientTimestamp
	}
	return 0
}

type CMsgSteamDatagramDataRouterToClient struct {
	ClientSessionId  *uint32 `protobuf:"varint,1,opt,name=client_session_id" json:"client_session_id,omitempty"`
	Channel          *uint32 `protobuf:"varint,2,opt,name=channel" json:"channel,omitempty"`
	Payload          []byte  `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramDataRouterToClient) Reset()         { *m = CMsgSteamDatagramDataRouterToClient{} }
func (m *CMsgSteamDatagramDataRouterToClient) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramDataRouterToClient) ProtoMessage()    {}

func (m *CMsgSteamDatagramDataRouterToClient) GetClientSessionId() uint32 {
	if m != nil && m.ClientSessionId != nil {
		return *m.ClientSessionId
	}
	return 0
}

func (m *CMsgSteamDatagramDataRouterToClient) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CMsgSteamDatagramDataRouterToClient) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("dota.ESteamDatagramMsgID", ESteamDatagramMsgID_name, ESteamDatagramMsgID_value)
}
